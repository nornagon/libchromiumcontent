resources:
- repo: self
phases:
- phase: Build_libchromiumcontent
  condition: or(eq(variables['System.PullRequest.IsFork'], 'True'), ne(variables['Build.Reason'], 'PullRequest'))
  queue:
    parallel: 4
    timeoutInMinutes: 180
    matrix:
      libchromiumcontent-mas-shared:
        COMPONENT: shared_library
        MAS_BUILD: 1
        TARGET_ARCH: x64
        TARGET_TYPE: mas
      libchromiumcontent-mas-static:
        COMPONENT: static_library
        MAS_BUILD: 1
        TARGET_ARCH: x64
        TARGET_TYPE: mas
      libchromiumcontent-osx-shared:
        COMPONENT: shared_library
        TARGET_ARCH: x64
        TARGET_TYPE: osx
      libchromiumcontent-osx-static:
        COMPONENT: static_library
        TARGET_ARCH: x64
        TARGET_TYPE: osx

  steps:
  - bash: |
     set -e
     if [[ -z "${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}" ]] || "${SYSTEM_PULLREQUEST_ISFORK}" == "True"; then
       echo "##vso[task.setvariable variable=gitcommit]$BUILD_SOURCEVERSION"
     else
       tmp="${BUILD_SOURCEVERSIONMESSAGE/#Merge /}"
       PR_COMMIT_ID="${tmp%% into*}"
       echo "PR is for repo branch, using original commit $PR_COMMIT_ID"
       echo "##vso[task.setvariable variable=gitcommit]$PR_COMMIT_ID"
       echo "Checking out $PR_COMMIT_ID"
       git checkout $PR_COMMIT_ID
       echo "Now switched to `git rev-parse HEAD`"
     fi
    name: Get_commit

  - bash: |
     set -e
     echo "===Bootstrapping===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/bootstrap > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
    name: Bootstrap

  - bash: |
     set -e
     echo "===Updating for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     if [ "${COMPONENT}" == "shared_library" ]; then
       script/update --clean -t $TARGET_ARCH --use-bundled-sccache > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     else
       script/update --clean -t $TARGET_ARCH > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     fi
    name: Update

  - bash: |
     set -e
     if [ "${COMPONENT}" == "shared_library" ]; then
       script/sccache --start-server --azure_container "$(SCCACHE_AZURE_BLOB_CONTAINER)" --azure_connection "$(SCCACHE_AZURE_CONNECTION_STRING)" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
       script/sccache -s > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     fi
     echo "===Building $COMPONENT for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/build -t $TARGET_ARCH -c $COMPONENT > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     echo "===Building ffmpeg for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/build -t $TARGET_ARCH -c ffmpeg > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     if [ "${COMPONENT}" == "shared_library" ]; then
       script/sccache --stop-server > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     else
       if [ "${BUILD_REASON}" == "Schedule" ]; then
         script/build -t $TARGET_ARCH -c tests > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
       fi
     fi
    name: Build

  - bash: |
     set -e
     echo "===Create $COMPONENT distribution for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/create-dist -t $TARGET_ARCH -c $COMPONENT > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     mkdir s3files
     mv libchromiumcontent* s3files
     mv buildlog.txt s3files
    name: Create_distribution

  - bash: |
     set +e
     echo "===Run tests against $COMPONENT distribution for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/run_tests --generate_report > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     cp -r test_reports s3files
    name: Run_tests
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'), eq(variables['COMPONENT'], 'static_library'))

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '*.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)/test_reports'
      testRunTitle: 'Libchromiumcontent Tests'
    condition: and(always(), eq(variables['Build.Reason'], 'Schedule'), eq(variables['COMPONENT'], 'static_library'))

  - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
    inputs:
      awsCredentials: 'Libchromium Content S3'
      regionName: 'us-east-1'
      bucketName: 'github-janky-artifacts'
      sourceFolder: s3files
      globExpressions: '*'
      targetFolder: 'libchromiumcontent/$(TARGET_TYPE)/$(TARGET_ARCH)/$(gitcommit)'
      filesAcl: 'public-read'
      logRequest: true
      logResponse: true

  - bash: |
     if [[ -z "${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}" ]]; then
       echo "Skipping build results upload because there is not a PR number"
     else
       npm install --prefix ./script/reportbuild
       LIBCHROMIUMCONTENT_GITHUB_TOKEN=$(LIBCHROMIUMCONTENT_GITHUB_TOKEN) node script/reportbuild/upload-build-results.js --buildName="$AGENT_JOBNAME" --logFile="$(TARGET_TYPE)/$(TARGET_ARCH)/$(gitcommit)/buildlog.txt" --prNumber="$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" --commitId="$BUILD_SOURCEVERSION" --failed
      fi
    condition: failed()

  - bash: |
     if [[ -z "${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}" ]]; then
       echo "Skipping build results upload because there is not a PR number"
     else
       npm install --prefix ./script/reportbuild
       LIBCHROMIUMCONTENT_GITHUB_TOKEN=$(LIBCHROMIUMCONTENT_GITHUB_TOKEN) node script/reportbuild/upload-build-results.js --buildName="$AGENT_JOBNAME" --logFile="$(TARGET_TYPE)/$(TARGET_ARCH)/$(gitcommit)/buildlog.txt" --prNumber="$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" --commitId="$BUILD_SOURCEVERSION"
      fi

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    condition: always()
